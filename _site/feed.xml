<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>iSEC Research Labs</title>
		<description>iSEC's engineers often release open-source tools, whitepapers, and research presentations as part of our work. This is where we keep them.</description>
		<link>http://isecpartners.github.io/</link>
		<atom:link href="http://isecpartners.github.io//feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Cryptopocalypse Reference Paper</title>
				<description>&lt;p&gt;Alex Stamos, Tom Ritter and Javed Samuel presented &amp;quot;Preparing for the
Cryptopocalypse&amp;quot; at Black Hat 2013, looking into the latest breakthroughs in
the academic cryptography community. The original presentation can be
downloaded &lt;a href=&quot;https://github.com/iSECPartners/publications/blob/master/presentations/ritter_samuel_stamos_bh_2013_cryptopocalypse.pdf?raw=true&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today we&amp;#39;re releasing a full whitepaper that provides additional detail and
extensive references which will explain the latest breakthroughs in the
academic cryptography community and look ahead at what practical issues could
arise for popular cryptosystems. Specifically, it focuses on the recent major
developments in discrete mathematics and their potential ability to undermine
our trust in the most basic asymmetric primitives, including RSA.&lt;/p&gt;

&lt;p&gt;It explain the basic theories behind RSA and the state-of-the-art in large
numbering factoring, and how several recent papers may point the way to
massive improvements in this area. It also describes some of the mathematics
of Elliptic Curve Cryptography (ECC).&lt;/p&gt;

&lt;p&gt;The paper then switches to the practical aspects of the doomsday scenario,
and will answer the question &amp;quot;What happens the day after RSA is broken?&amp;quot;
It will point out the many obvious and hidden uses of RSA and related
algorithms and outline how software engineers and security teams can operate
in a post-RSA world. We will also discuss the results of our survey of
popular products and software, and point out the ways in which individuals
can prepare for the &amp;quot;zombie cryptopocalypse&amp;quot;.&lt;/p&gt;

&lt;p&gt;The paper provides a detailed list of references to the latest academic papers
related to asymmetric cryptography. In addition, references that discuss the
current level of ECC support in various popular products and software are
included.&lt;/p&gt;

&lt;p&gt;The paper can be downloaded &lt;a href=&quot;https://github.com/iSECPartners/publications/blob/master/whitepapers/Cryptopocalypse_Reference_Paper.pdf?raw=true&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Thu, 20 Mar 2014 00:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//blackhat/crypto/2014/03/20/cryptopocalypse-reference-paper.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//blackhat/crypto/2014/03/20/cryptopocalypse-reference-paper.html</guid>
			</item>
		
			<item>
				<title>AWS environment security assessment with Scout2</title>
				<description>&lt;p&gt;Security engineers at iSEC Partners are regularly involved in projects that
require assessing the security of an Amazon Web Services (AWS) environment.
Thoroughly reviewing AWS configuration requires poring through dozens to
hundreds of pages in the AWS console, depending on the environment&amp;#39;s size. In
2012, iSEC Partners released AWS Scout to help AWS administrators assess their
environment&amp;#39;s security posture. Unfortunately, APIs have changed since then,
and the tool wasn&amp;#39;t written in a particularly maintainable fashion.&lt;/p&gt;

&lt;h3&gt;AWS Scout2&lt;/h3&gt;

&lt;p&gt;iSEC Partners developed a new, more comprehensive, version of AWS Scout in order
to address its need for an AWS configuration review tool. AWS Scout2 is an
open-source application written in Python that connects to the AWS API and
downloads configuration data for the following AWS services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identity and Access Management (IAM)&lt;/li&gt;
&lt;li&gt;Elastic Compute Cloud (EC2)&lt;/li&gt;
&lt;li&gt;Simple Storage Service (S3)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The information gathered is then rendered in an offline HTML report. In
addition to AWS configuration, this HTML report displays a number of security
risks.&lt;/p&gt;

&lt;h3&gt;Project page&lt;/h3&gt;

&lt;p&gt;iSEC Partners is pleased to release AWS Scout2 to the security community. See
the Github repository page for full details on how to download and use the tool:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://isecpartners.github.io/Scout2/&quot;&gt;https://github.com/iSECPartners/Scout2&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 19 Feb 2014 02:51:00 -0500</pubDate>
				<link>http://isecpartners.github.io//tools/aws/2014/02/19/aws-scout.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//tools/aws/2014/02/19/aws-scout.html</guid>
			</item>
		
			<item>
				<title>iOS certificate pinning code updated for iOS 7</title>
				<description>&lt;p&gt;We&amp;#39;ve updated the iOS certificate pinning code which is part of iSEC&amp;#39;s
&lt;a href=&quot;https://github.com/iSECPartners/ssl-conservatory/tree/master/ios&quot;&gt;SSL Conservatory&lt;/a&gt; project on Github. This new version brings the
following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Xcode project was re-created as a static library (instead of an iOS App)
to facilitate integration. Sample code demonstrating how to use the library has
been moved the project&amp;#39;s unit tests.&lt;/li&gt;
&lt;li&gt;A new convenience delegate class for &lt;em&gt;NSURLSession&lt;/em&gt;, the HTTP connection
framework introduced in iOS 7, was added to the project. Similarly to the
existing convenience class for &lt;em&gt;NSURLConnection&lt;/em&gt; this class makes it easy to add
certificate pinning to connections relying on &lt;em&gt;NSURLSession&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Project page&lt;/h3&gt;

&lt;p&gt;Code and instructions are available on the project&amp;#39;s &lt;a href=&quot;https://github.com/iSECPartners/ssl-conservatory/tree/master/ios&quot;&gt;Github page&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Sat, 01 Feb 2014 02:51:00 -0500</pubDate>
				<link>http://isecpartners.github.io//tools/ios/ssl/2014/02/01/ios-pinning-updated.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//tools/ios/ssl/2014/02/01/ios-pinning-updated.html</guid>
			</item>
		
			<item>
				<title>Announcing the Release of RtspFuzzer</title>
				<description>&lt;p&gt;iSEC Partners is pleased to announce the release of RtspFuzzer, an open-source fuzzer for the real-time streaming protocol (RTSP). RTSP is a text-based protocol that facilitates media streaming. We have been developing this fuzzer over the past several months as we fuzz different media players. Though this protocol doesn&amp;#39;t receive much attention, most popular media players implement it and these implementations have previously been a source of critical security vulnerabilities (including &lt;a href=&quot;http://cvedetails.com/cve/2007-6166&quot;&gt;QuickTime&lt;/a&gt; and &lt;a href=&quot;http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3225&quot;&gt;Windows Media Player&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Using RtspFuzzer, we &lt;a href=&quot;http://isecpartners.github.io/fuzzing/vulnerabilities/2013/12/30/vlc-vulnerability.html&quot;&gt;uncovered a new, critical vulnerability&lt;/a&gt; in the Live555 library, an open-source implementation of the RTSP protocol that several media players and servers use, including VLC. The vulnerability allowed an attacker to gain remote code execution on a victim&amp;#39;s system if they could induce a VLC user to visit a malicious web page or open a malicious playlist file.&lt;/p&gt;

&lt;h3&gt;Using RtspFuzzer&lt;/h3&gt;

&lt;p&gt;See the Github repository page to download the tool and for quick start instructions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/iSECPartners/RtspFuzzer&quot;&gt;https://github.com/iSECPartners/RtspFuzzer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We created the fuzzer using the &lt;a href=&quot;http://www.peachfuzzer.com&quot;&gt;Peach fuzzing framework&lt;/a&gt;. RtspFuzzer has built-in configurations for Windows binaries of QuickTime, VLC, and openRTSP, but users can easily adjust the configuration and use this fuzzer to test any RTSP client on any Peach-compatible platform.&lt;/p&gt;

&lt;h3&gt;Advice for developing fuzzers with Peach&lt;/h3&gt;

&lt;p&gt;Creating RtspFuzzer was a great way to learn to use Peach. Peach is a very powerful framework for fuzzing, but many people shy away from it and instead create one-off fuzzers because they perceive Peach&amp;#39;s learning curve as too steep. Peach does indeed take some time to learn, but it does also save you from rolling your own implementation of a lot of things that Peach does for you, such as integrating with debuggers, mutating your data to match common attack patterns, or logging results in an organized way.&lt;/p&gt;

&lt;p&gt;I would like to see Peach succeed because, despite its current problems, Peach makes it easy to write fuzzers that others can reuse and adapt. As more people use Peach, more information about its use will be available and this will reduce the learning curve. The Peach development team is &lt;a href=&quot;http://forums.peachfuzzer.com/forumdisplay.php?2-Peach-3-Beta&quot;&gt;very responsive&lt;/a&gt;, and as the user base increases, more people will be able to report bugs and feature suggestions. If you&amp;#39;re thinking of writing a fuzzer with Peach, keep the following tips in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Treat your Peach pit like a regular program.&lt;/strong&gt; Keep it under source control and use bug tracking to maintain a list of issues in your fuzzer. Debugging your fuzzer will be a &lt;em&gt;lot&lt;/em&gt; easier if you can revert to a known good state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expect bugs in Peach.&lt;/strong&gt; While Peach has existed since 2004, the latest 3.x version is a complete rewrite of the product in .NET and was first released in May, 2013. Peach works well for the most part, but there are definitely some rough edges, especially as your pits get more complex. You need to account for this in planning if you&amp;#39;re building your fuzzer on a schedule. I recommend building Peach from source so that if you suspect you&amp;#39;ve run into a bug in the framework itself, you can debug it more easily.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fuzz early and fuzz often.&lt;/strong&gt; When I started working on the RTSP fuzzer, my first task was to define the RTSP protocol as precisely as I could in Peach. What I &lt;em&gt;wish&lt;/em&gt; I had done first was build a mostly dumb fuzzer that spoke just enough RTSP to do basic fuzzing of a test application such as VLC, then build up from there. Seeing how Peach works and how it interprets the data in pit files is immensely helpful in designing your fuzzer. Look at the kind of data that Peach generates and see if anything is causing iterations to run slowly or to stop.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 07 Jan 2014 07:13:00 -0500</pubDate>
				<link>http://isecpartners.github.io//tools/fuzzing/2014/01/07/rtsp-fuzzer.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//tools/fuzzing/2014/01/07/rtsp-fuzzer.html</guid>
			</item>
		
			<item>
				<title>iOS 7 tool updates</title>
				<description>&lt;p&gt;With the availability of the evasi0n7 jailbreak and the subsequent release two
days ago of &lt;a href=&quot;http://www.cydiasubstrate.com/&quot;&gt;Cydia Substrate&lt;/a&gt; with support for iOS 7 and ARM64, a
full-blown iOS 7 penetration testing environment can now be setup. To this
extent, we&amp;#39;ve updated our &lt;a href=&quot;https://github.com/iSECPartners/&quot;&gt;publicly available&lt;/a&gt; iOS tools for blackbox
testing in order to add support for iOS 7 and ARM64. We just released the two
following updates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iSECPartners/ios-ssl-kill-switch/releases&quot;&gt;iOS SSL Kill Switch v0.5&lt;/a&gt;, our tool to disable SSL certificate
verification/pinning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iSECPartners/Introspy-iOS/releases&quot;&gt;Introspy-iOS v0.4&lt;/a&gt;, our iOS Apps security profiler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pre-compiled packages for these tools now contain both an armv7 and an
arm64 slice, which means that they will work on 64 bits iOS Apps for devices
with an A7 chip (such as the iPhone 5s and the iPad Air).&lt;/p&gt;

&lt;p&gt;Both tools were successfully tested on an iPhone 5s running iOS 7.0.4:&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&quot;/images/introspy-ios7.png&quot; alt=&quot;screenshot&quot;&gt; &lt;/center&gt;&lt;/p&gt;

&lt;h3&gt;Sandbox changes in iOS 7&lt;/h3&gt;

&lt;p&gt;While testing Introspy-iOS on iOS 7, I ran into issues with the &lt;em&gt;sandboxd&lt;/em&gt;
daemon denying write access to specific files the tool was trying to create.
Interestingly enough, it seems like the Seatbelt profiles deployed on iOS 7
have been updated, compared to iOS 6. Specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AppStore Apps can no longer write to the root folder of their container
directory, for example
&lt;em&gt;/var/mobile/Applications/3152B928-D771-424C-AE39-F79EC4A79EC5/&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;System Apps can no longer write to &lt;em&gt;/var/mobile/&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of these changes, I had to modify the locations where Introspy-iOS
stores its files, to the following paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;[App Container]/Library/&lt;/em&gt; for AppStore Apps.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/var/mobile/Library/Preferences/&lt;/em&gt; for System Apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is unclear why the Seatbelt profiles were changed, although the ability to
write to these locations was not actually needed by Apps. More information
regarding the Seatbelt profiles used for various iOS Apps is available on the
&lt;a href=&quot;http://iphonedevwiki.net/index.php/Seatbelt&quot;&gt;iphonedev wiki&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Thu, 02 Jan 2014 13:44:00 -0500</pubDate>
				<link>http://isecpartners.github.io//ios/introspy/tools/2014/01/02/ios7-tool-update.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//ios/introspy/tools/2014/01/02/ios7-tool-update.html</guid>
			</item>
		
			<item>
				<title>SSLyze v0.8 released</title>
				<description>&lt;p&gt;A new version of &lt;a href=&quot;https://github.com/iSECPartners/sslyze&quot;&gt;SSLyze&lt;/a&gt; is now available. SSLyze is a Python tool that can analyze the SSL configuration of a server by connecting to it.&lt;/p&gt;

&lt;h3&gt;Changelog&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Additional certificate chain validation using the Apple, Microsoft and Java trust stores in addition to Mozilla&amp;#39;s&lt;/li&gt;
&lt;li&gt;Added support for StartTLS RDP; see --starttls=rdp&lt;/li&gt;
&lt;li&gt;Greatly improved the reliability and accuracy of scan results by adding an exponential backoff algorithm to retry failed network connections. This will especially impact scans against servers that stop properly answering after several concurrent connections have already been opened. The number of retry attempts can be controlled using --nb_retries&lt;/li&gt;
&lt;li&gt;Bug fixes including:

&lt;ul&gt;
&lt;li&gt;Better results when the server requested a client certificate but none was supplied&lt;/li&gt;
&lt;li&gt;Clarified text and XML output&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Packages&lt;/h3&gt;

&lt;p&gt;SSLyze requires Python 2.7; the supported platforms are Windows 7 32/64 bits,
Linux 32/64 bits and OS X 64 bits.&lt;/p&gt;

&lt;p&gt;SSLyze is statically linked with OpenSSL 1.0.1e. For this reason, the easiest
way to run SSLyze is to download one the pre-compiled packages available in
the &lt;a href=&quot;https://github.com/iSECPartners/sslyze/releases&quot;&gt;release section&lt;/a&gt; of the project&amp;#39;s page on GitHub.&lt;/p&gt;
</description>
				<pubDate>Mon, 30 Dec 2013 13:44:00 -0500</pubDate>
				<link>http://isecpartners.github.io//ssl/tools/2013/12/30/sslyze-0_8.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//ssl/tools/2013/12/30/sslyze-0_8.html</guid>
			</item>
		
			<item>
				<title>Fuzzing RTSP to discover an exploitable vulnerability in VLC</title>
				<description>&lt;p&gt;In this post, we will describe the bug iSEC recently discovered in the Live555
library (CVE-2013-6933, CVE-2013-6934). This yielded a remote code execution
vulnerability in all client and server applications that use the Live555
library, including the popular media player VLC.&lt;/p&gt;

&lt;h3&gt;Background&lt;/h3&gt;

&lt;p&gt;Over the past several months, I&amp;#39;ve been using the &lt;a href=&quot;http://www.peachfuzzer.com&quot;&gt;Peach
framework&lt;/a&gt; to create a fuzzer for client
implementations of the RTSP protocol. For those not familiar, RTSP is a
protocol that helps media players stream content. It is a text-based format
that closely resembles HTTP. A simple RTSP request looks like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;GET_PARAMETER rtsp://streams.isecpartners.com/foo/bar.mp4 RTSP/1.0
CSeq: 9
Content-Type: text/parameters
Session: 12345678
Content-Length: 24

packets_received
jitter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My first two fuzzing targets were QuickTime and VLC, two popular media players
that implement the RTSP protocol. After running 250,000 iterations against
both, QuickTime had a few crashes, though none of them seemed exploitable
(NULL pointer dereferences and the like). The VLC fuzzing yielded something
more interesting.&lt;/p&gt;

&lt;h3&gt;Discovery&lt;/h3&gt;

&lt;p&gt;The issue is a write access violation when VLC receives an RTSP message of the
following form:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt; A RTSP/1.0
CSeq: 10
Content-Type: text/parameters
Session: 12345678
Content-Length: 24

packets_received
jitter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that instead of starting with an RTSP command, the request begins with a
space character. To understand why this causes an access violation, we&amp;#39;ll jump
into VLC&amp;#39;s RTSP handling code, which is actually a 3rd party library called
&lt;a href=&quot;http://www.live555.com/liveMedia/&quot;&gt;Live555&lt;/a&gt;. The vulnerable function is
parseRTSPRequestString(), which begins as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;unsigned i;
for (i = 0; i &amp;lt; resultCmdNameMaxSize-1 &amp;amp;&amp;amp; i &amp;lt; reqStrSize; ++i) {
  char c = reqStr[i];
  if (c == &amp;#39; &amp;#39; || c == &amp;#39;\t&amp;#39;) {
    parseSucceeded = True;
    break;
  }

  resultCmdName[i] = c;
}
resultCmdName[i] = &amp;#39;\0&amp;#39;;
if (!parseSucceeded) return False;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we can begin to see what the problem is. If reqStr begins with a space or
tab character, the function believes that it has parsed the RTSP command
(stored in resultCmdName), when in fact it has parsed nothing. Continuing a
bit further down in the function, we have the following code block:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;// [Ed: At this point, variables have the following values:
//  i=0
//  k=1
//  k1=0
//  n=0]
n = 0; k2 = i + 1;
if (i &amp;lt;= k) {
  if (k1 - i &amp;gt; resultURLPreSuffixMaxSize) return False;
  while (k2 &amp;lt;= k1 - 1) resultURLPreSuffix[n++] = reqStr[k2++];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that the while statement is really equivalent to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;while (k2 &amp;lt;= 0xffffffff) resultURLPreSuffix[n++] = reqStr[k2++];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which is equivalent to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;while (true) resultURLPreSuffix[n++] = reqStr[k2++];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;because k2 is an unsigned int and can never be greater than 0xffffffff.&lt;/p&gt;

&lt;h3&gt;Exploitation&lt;/h3&gt;

&lt;p&gt;Right now, this is looking very promising. reqStr points to an address on the
heap, and the attacker has a great deal of control over the heap contents
through previous RTSP messages. resultURLPreSuffix points to an address on the
stack. This means that we can overwrite the entire stack with attacker
controlled data. The problem, in the words of security researcher and singer,
M. Cyrus:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../../images/miley-wecantstop.jpg&quot; alt=&quot;Miley Cyrus - &amp;quot;We can&amp;#39;t stop and we won&amp;#39;t stop&amp;quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;We can overwrite the stack, but we can&amp;#39;t terminate the write and continue
execution. We&amp;#39;re trapped in this infinite loop until the access violation
occurs when we reach unallocated memory.&lt;/p&gt;

&lt;p&gt;At this point, I was stuck. I shared my results with some colleagues
internally and Andreas Junestam, one of iSEC&amp;#39;s Distinguished Security
Engineers, pointed out to me that I could actually use the access violation to
my advantage on Windows. The SEH chain is stored on the stack, so I could
overwrite it and gain code execution when the access violation occurs (Corelan
has a &lt;a href=&quot;https://www.corelan.be/index.php/2009/07/25/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-3-seh/&quot;&gt;nice
tutorial&lt;/a&gt;
on how to do this). Within a couple days, I was able to produce a simple proof
of concept that pops calc on Windows XP SP3.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=fhqWdkUSWXQ&quot;&gt;&lt;img src=&quot;../../../../../images/youtube_screenshot_vlc.png&quot; alt=&quot;VLC proof of concept exploit&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m cheating a bit by using XP, as every VLC binary for Windows since v.1.0.5
is compiled with DEP, and ASLR. The last version of VLC that was compiled
without ASLR or DEP was v.1.0.5, though that precedes the vulnerability, which
was introduced in v.2.0.0. VLC v.2.1.1 has SafeSEH, DEP, and ASLR enabled, but
I can bypass SafeSEH on XP by jumping to a ROP gadget located within process
memory but outside of loaded modules. I could find no such reliable gadget
available on Vista and above, especially with ASLR enabled.&lt;/p&gt;

&lt;h3&gt;Exploitation Vectors&lt;/h3&gt;

&lt;h4&gt;Clients&lt;/h4&gt;

&lt;p&gt;The video demonstrates three different vectors through which an attacker can
exploit this vulnerability against VLC users. The simplest and most
straightforward vector is to trick a user into manually connecting to a
malicious RTSP server by instructing the victim to select Media &amp;gt; Open Network
Stream and enter the malicious RTSP server address.&lt;/p&gt;

&lt;p&gt;A more realistic attack vector is to use .pls files. These are playlist files
that specify a list of files or streams for a media player to play. When a
user installs VLC, it registers itself as the default handler for .pls files.
When VLC opens a .pls file, it will automatically connect to any RTSP streams
specified in the file.&lt;/p&gt;

&lt;p&gt;The most practical and frightening attack vector is via the VLC browser
plugin. By default, VLC installs both a Mozilla-based and ActiveX plugin for
all available browsers. This allows any web site that a victim visits to
launch VLC with site-supplied parameters. An attacker can easily use this to
force VLC to connect to a malicious RTSP server and compromise the victim&amp;#39;s
system.&lt;/p&gt;

&lt;h4&gt;Servers&lt;/h4&gt;

&lt;p&gt;Because the vulnerable code is in a component that both RTSP clients and
servers share in the Live555 library, an attacker can exploit this against
Live555-based RTSP servers as well (including VLC). On Windows platforms, the
attacker can gain remote code execution using a similar method to the client
attack described above. Regardless of the platform, the attacker can perform
denial of service attacks against the server, as the malformed requests will
cause the server to crash.&lt;/p&gt;

&lt;h3&gt;Versions Affected&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;VLC Version | Live555 Version | Vulnerability
------------+-----------------+--------------
2.1.2       | 2013.12.05      | Fixed
            | 2013.11.29      | Fixed
            | 2013.11.26      | Partial fix
2.1.1       | 2012.12.18      | Vulnerable
2.1.0       | 2012.12.18      | Vulnerable
2.0.0       | 2011.12.23      | Vulnerable
            | 2011.08.13      | Vulnerability introduced
            | 2011.07.21      | Unaffected
1.1.9       | 2011.01.06      | Unaffected
1.1.0       | 2010.03.16      | Unaffected
1.0.5       | 2010.01.07      | Unaffected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Disclosure Timeline&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;11/25/2013 - iSEC notifies vendor (Live Networks) of the issue
(CVE-2013-6933)&lt;/li&gt;
&lt;li&gt;11/26/2013 - Live Networks partially fixes issue&lt;/li&gt;
&lt;li&gt;11/29/2013 - iSEC tests the fix, identifies remaining variant of original
vulnerability (CVE-2013-6934), notifies Live Networks&lt;/li&gt;
&lt;li&gt;11/29/2013 - Live Networks fixes issue, encourages clients to upgrade in
&lt;a href=&quot;http://www.live555.com/liveMedia/public/changelog.txt&quot;&gt;changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;12/01/2013 - iSEC confirms fix in Live555&lt;/li&gt;
&lt;li&gt;12/09/2013 - VLC releases version 2.1.2, which includes Live555 version
2013.12.05, fixing the issue&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Mitigations&lt;/h3&gt;

&lt;h4&gt;For end-users&lt;/h4&gt;

&lt;p&gt;Upgrade to VLC 2.1.2. To limit your exposure to future vulnerabilities,
consider leaving the VLC plugin disabled in your browser or setting it to
&lt;a href=&quot;http://krebsonsecurity.com/2013/03/help-keep-threats-at-bay-with-click-to-play/&quot;&gt;Click-to-Play&lt;/a&gt;. Do not use VLC to open untrusted .pls files.&lt;/p&gt;

&lt;p&gt;For users of other applications that depend on Live555, do not connect to
untrusted RTSP streams until the client is updated to use live.2013.11.29 or
higher.&lt;/p&gt;

&lt;h4&gt;For developers that use the Live555 library&lt;/h4&gt;

&lt;p&gt;Update your application to the latest version of Live555 as soon as possible.
Urge your users to patch quickly.&lt;/p&gt;

&lt;h4&gt;For RTSP server administrators&lt;/h4&gt;

&lt;p&gt;Upgrade your RTSP server to use a Live555 library version 2013.11.29 or later.
If you cannot immediately do this, download the latest &lt;a href=&quot;http://www.live555.com/liveMedia/public/live555-latest.tar.gz&quot;&gt;Live555
source&lt;/a&gt; and
build the Live555 Proxy Server. Run vulnerable RTSP servers on the back end,
where they are not exposed to malicious RTSP requests. Use the Live555 Proxy
Server as the externally facing server to route RTSP requests to back end RTSP
servers. If the Live555 Proxy Server receives an RTSP request that is
attempting to exploit this vulnerability, it will reject the request with RTSP
400 Bad Request without passing it along to a vulnerable back end server.&lt;/p&gt;

&lt;h3&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;This type of attack should serve as a reminder to users to be very
conservative with their browser plugin configurations. Remember that browser
plugins (meaning Mozilla-based and ActiveX plugins) run in processes outside
of the browser sandbox and are responsible for parsing arbitrary data from
arbitrary web sites. For an application such as VLC, which accepts many &lt;a href=&quot;https://wiki.videolan.org/VLC_Features_Formats/&quot;&gt;file
formats&lt;/a&gt; and
&lt;a href=&quot;https://wiki.videolan.org/Protocols/&quot;&gt;protocols&lt;/a&gt;, the attack surface is quite
large. Users should enable plugins, not only if they trust the plugin to be
non-malicious, but if they trust it to withstand attacks from &lt;em&gt;any&lt;/em&gt; &lt;em&gt;web&lt;/em&gt;
&lt;em&gt;site&lt;/em&gt; that&amp;#39;s malicious.&lt;/p&gt;
</description>
				<pubDate>Mon, 30 Dec 2013 08:25:00 -0500</pubDate>
				<link>http://isecpartners.github.io//fuzzing/vulnerabilities/2013/12/30/vlc-vulnerability.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//fuzzing/vulnerabilities/2013/12/30/vlc-vulnerability.html</guid>
			</item>
		
			<item>
				<title>iSEC Engages in TrueCrypt Audit</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://istruecryptauditedyet.com/&quot;&gt;Is TrueCrypt audited yet&lt;/a&gt;? It&amp;#39;s finally
happening.&lt;/p&gt;

&lt;p&gt;For the past few months, there has been much ado about TrueCrypt, the popular
open-source encryption software. Despite being the most widely-used and
simplest encryption software around, the security of its source code and
binaries has come into question. The groundswell of interest from the security
community became a crowdsourced campaign to have TrueCrypt undergo a
professional security audit.&lt;/p&gt;

&lt;p&gt;Today, we are excited to announce that iSEC Partners will be participating in
that audit!&lt;/p&gt;

&lt;p&gt;iSEC is both honored and fortunate to be part of the security audit of
TrueCrypt. Our task will be to pore over the 70,000+ lines of source code,
helping answer outstanding questions the security community has about the
software&amp;#39;s foundations. iSEC will be focusing on the Windows kernel code, the
bootloader, the filesystem driver, and the areas around this code. Our efforts
will complement the analyses being performed by others on other parts of the
software.&lt;/p&gt;

&lt;p&gt;The speed with which funds were raised underscores the importance of this
project to the community. This audit is part of a broad plan to transform
TrueCrypt from a &amp;quot;seems okay&amp;quot; solution into a trusted project with
reproducible, trusted builds available to all. Being part of this effort is an
opportunity iSEC does not take for granted. TrueCrypt is, as others have said,
&amp;quot;too important to have this little transparency&amp;quot;. iSEC is excited to help
bring more trust and transparency to TrueCrypt!&lt;/p&gt;
</description>
				<pubDate>Mon, 23 Dec 2013 06:25:55 -0500</pubDate>
				<link>http://isecpartners.github.io//news/2013/12/23/iSEC-Engages-In-Truecrypt-Audit.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//news/2013/12/23/iSEC-Engages-In-Truecrypt-Audit.html</guid>
			</item>
		
			<item>
				<title>Login Service Security</title>
				<description>&lt;p&gt;Web application login services are deceptively simple to develop, leading
application developers to repeat the mistakes of the past. Learning from the
best available mitigations for login service vulnerabilities can have a
significant organizational impact in terms of protecting customers and
reducing costs related to account breaches.&lt;/p&gt;

&lt;p&gt;This paper explores login service security using attack and defense patterns
and anti-patterns, offering application developers an easy to follow guide to
correctly writing login services. While brute force attacks can&amp;#39;t be
completely stopped, they can be drastically reduced using a few simple
techniques.&lt;/p&gt;

&lt;p&gt;The paper can be downloaded &lt;a href=&quot;https://github.com/iSECPartners/publications/blob/master/whitepapers/login_service_security.pdf?raw=true&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Tue, 17 Dec 2013 10:58:00 -0500</pubDate>
				<link>http://isecpartners.github.io//whitepapers/2013/12/17/Login-Service-Security.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//whitepapers/2013/12/17/Login-Service-Security.html</guid>
			</item>
		
			<item>
				<title>SSL pinning bypass and other Android tools</title>
				<description>&lt;p&gt;iSEC is releasing several &lt;a href=&quot;http://www.cydiasubstrate.com/&quot;&gt;Cydia Substrate&lt;/a&gt; extensions to
facilitate the black box testing of Android applications:&lt;/p&gt;

&lt;h4&gt;Android-SSL-TrustKiller&lt;/h4&gt;

&lt;p&gt;This tool hooks various methods in order to disable SSL certificate pinning,
by forcing the Android application to accept any SSL certificate. Once
installed, it works across all applications on a device. See the &lt;a href=&quot;https://github.com/iSECPartners/Android-SSL-TrustKiller&quot;&gt;project
page&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Android-KillPermAndSigChecks&lt;/h4&gt;

&lt;p&gt;This tool disables signature and permission checks for Android IPCs. This can
be useful to test internal or restricted IPCs in specific cases/scenarios. See
the &lt;a href=&quot;https://github.com/iSECPartners/Android-KillPermAndSigChecks&quot;&gt;project page&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Android-OpenDebug&lt;/h4&gt;

&lt;p&gt;This extension makes all applications running on the device debuggable; once
installed, any application will accept a debugger to attach to them. We
originally wrote a different version that hooked on the
android.content.pm.PackageParser class; however, MWR released a new technique
last week involving a faster way to do it, which is what this Cydia Extension
now uses. See the &lt;a href=&quot;https://github.com/iSECPartners/Android-OpenDebug&quot;&gt;project page&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Fri, 13 Dec 2013 09:42:42 -0500</pubDate>
				<link>http://isecpartners.github.io//android/2013/12/13/android-tools.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//android/2013/12/13/android-tools.html</guid>
			</item>
		
			<item>
				<title>Blackbox Android App Analysis with Introspy</title>
				<description>&lt;p&gt;As previously announced during our &lt;a href=&quot;ios/android/introspy/ruxcon/2013/10/27/introspy-slides-ruxcon-2013.html&quot;&gt;Ruxcon presentation&lt;/a&gt;, we&amp;#39;re
now releasing &lt;a href=&quot;http://isecpartners.github.io/Introspy-Android/&quot;&gt;Introspy for Android&lt;/a&gt;. The final version of the tool
was demonstrated at the &lt;a href=&quot;http://www.meetup.com/iSECOpenForums/&quot;&gt;iSEC Open Forum&lt;/a&gt; here in San Francisco.&lt;/p&gt;

&lt;h3&gt;Blackbox Android Pentesting&lt;/h3&gt;

&lt;p&gt;Similarly to the &lt;a href=&quot;https://github.com/iSECPartners/Introspy-iOS&quot;&gt;iOS version&lt;/a&gt; that was released a few months
ago, Introspy for Android is a tool designed to help penetration testers
understand what an Android application does at runtime, and to greatly
facilitate the process of reviewing the application&amp;#39;s security mechanisms.&lt;/p&gt;

&lt;p&gt;The tool can easily be installed on a rooted device running &lt;a href=&quot;http://www.cydiasubstrate.com/&quot;&gt;Cydia
Substrate&lt;/a&gt; and provides a GUI interface to configure hooks, filters and
options. See the &lt;a href=&quot;https://github.com/iSECPartners/Introspy-Android&quot;&gt;project page&lt;/a&gt; as well the
&lt;a href=&quot;/publications/2013.12.13-isec-openforum-introspy.pdf&quot;&gt;slides&lt;/a&gt; we presented at the Open Forum for more information
about what the tool does and how it works.&lt;/p&gt;

&lt;p&gt;Source code and pre-compiled packages are available on the project&amp;#39;s &lt;a href=&quot;https://github.com/iSECPartners/Introspy-Android&quot;&gt;source
repository&lt;/a&gt; on Github.&lt;/p&gt;
</description>
				<pubDate>Fri, 13 Dec 2013 08:42:42 -0500</pubDate>
				<link>http://isecpartners.github.io//android/2013/12/13/Instrospy-Android.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//android/2013/12/13/Instrospy-Android.html</guid>
			</item>
		
			<item>
				<title>Browser Extension Password Managers</title>
				<description>&lt;p&gt;Advancements in password cracking and frequent theft of password databases
endanger single-factor password authentication systems. Password managers
are one of the only tools available that can help users remember unique
high-entropy passwords, and other secrets such as credit card numbers, for
a large number of applications. Can password managers deliver on security
promises, or do they introduce their own security vulnerabilities? This
paper examines popular browser-based password managers and presents common
security flaws that could be exploited to remotely extract a user&amp;#39;s
password.&lt;/p&gt;

&lt;p&gt;Previous research on password managers has focused on the cryptographic
protections of the passwords themselves in particular environments such as
&lt;a href=&quot;http://media.blackhat.com/bh-eu-12/Belenko/bh-eu-12-Belenko-Password_Encryption-Slides.pdf&quot;&gt;mobile devices&lt;/a&gt;.
This research instead focuses on browser specific integrations and mechanisms
to remotely compromise credentials. Four of the
most popular password managers were examined: LastPass, OneLastPass, 1Password, and MaskMe.&lt;/p&gt;

&lt;p&gt;This research shows that the examined password managers made design decisions
that greatly increase the chance of users unknowingly exposing their passwords
through application-level flaws. Many of the flaws relate to the
browser-integrated password managers that don&amp;#39;t follow the same-origin policy
that is crucial to browser security. In the case of password managers, this
means that passwords could be filled into unintended credential forms, making
password theft easier.&lt;/p&gt;

&lt;p&gt;Check out the full paper
&lt;a href=&quot;https://github.com/iSECPartners/publications/blob/master/whitepapers/password_managers.pdf?raw=true&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Tue, 05 Nov 2013 12:45:55 -0500</pubDate>
				<link>http://isecpartners.github.io//whitepapers/passwords/2013/11/05/Browser-Extension-Password-Managers.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//whitepapers/passwords/2013/11/05/Browser-Extension-Password-Managers.html</guid>
			</item>
		
			<item>
				<title>Ruxcon 2013 - Introspy Presentation Slides</title>
				<description>&lt;p&gt;&lt;em&gt;Update: Introspy for Android is now &lt;a href=&quot;/android/2013/12/13/Instrospy-Android.html&quot;&gt;available&lt;/a&gt;; we&amp;#39;ve also
updated the &lt;a href=&quot;/publications/2013.12.13-isec-openforum-introspy.pdf&quot;&gt;slides&lt;/a&gt; with additional information regarding
the tool.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The slides for the &lt;strong&gt;Introspy: Security Profiling for Blackbox iOS and
Android&lt;/strong&gt; presentation from Ruxcon 2013 are now available.&lt;/p&gt;

&lt;p&gt;The presentation was given by Marc Blanchou and Alban Diquet, and introduces a
tool designed to facilitate the black-box testing of iOS and Android
applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Slides can be downloaded &lt;a href=&quot;/publications/2013.12.13-isec-openforum-introspy.pdf&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Introspy&amp;#39;s project page is available &lt;a href=&quot;http://isecpartners.github.io/Introspy-iOS/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only the iOS version is currently available; we will update this blog post as
soon as we release the Android tool.&lt;/p&gt;
</description>
				<pubDate>Sun, 27 Oct 2013 07:28:45 -0400</pubDate>
				<link>http://isecpartners.github.io//ios/android/introspy/ruxcon/2013/10/27/introspy-slides-ruxcon-2013.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//ios/android/introspy/ruxcon/2013/10/27/introspy-slides-ruxcon-2013.html</guid>
			</item>
		
			<item>
				<title>Working with the Open Technology Fund</title>
				<description>&lt;p&gt;Over the past year, iSEC Partners has worked with the &lt;a href=&quot;https://www.opentechfund.org/&quot;&gt;Open Technology
Fund&lt;/a&gt; on several of their supported projects.
OTF funds projects that develop open and accessible technologies promoting
human rights and open societies. Some of the projects they support that we&amp;#39;ve
been able to work on are &lt;a href=&quot;https://whispersystems.org/&quot;&gt;Open Whisper Systems&lt;/a&gt;&amp;#39;
RedPhone and TextSecure, &lt;a href=&quot;https://commotionwireless.net/&quot;&gt;Commotion&lt;/a&gt;, and
&lt;a href=&quot;https://globaleaks.org/&quot;&gt;GlobaLeaks&lt;/a&gt;, among others.&lt;/p&gt;

&lt;p&gt;We consider ourselves very fortunate to be able to work on projects that are
both very technically interesting and helping make the world a better place.
Projects that OTF supports are used &amp;#39;in the field&amp;#39; documenting human rights
abuses abroad, provide secure and encrypted communication platforms, and help
document Internet interference and censorship. An extension of our &lt;a href=&quot;https://isecpartners.com/blog/2013/february/towards-better-security-when-the-stakes-are-high.aspx&quot;&gt;Liberation
Technology Auditing
Cheatsheet&lt;/a&gt;,
this work is directly in line with our efforts to make the entire Internet a
more secure place.&lt;/p&gt;

&lt;p&gt;In conjunction with these audits, we&amp;#39;ve also helped OTF perform a review of
their audit process. The goal of this review was to take a look at the
breadth, scope, and coverage of security audits performed on OTF funded
applications to date. We aimed to identify the strengths and shortcomings in
OTF&amp;#39;s current process and provide recommendations to improve the breadth of
coverage and to derive greater value in the future. Applicable to both OTF and
other funding agencies in the Liberation Technology and Civil Society
communities, we hope this work inspires more development and more integration
between security professionals and project teams. OTF has published this
review over &lt;a href=&quot;https://www.opentechfund.org/article/report-how-evaluate-technical-audits-funder&quot;&gt;on their
website&lt;/a&gt;
where you can take a look.&lt;/p&gt;
</description>
				<pubDate>Mon, 14 Oct 2013 11:54:55 -0400</pubDate>
				<link>http://isecpartners.github.io//2013/10/14/open-tech-fund-report-release.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//2013/10/14/open-tech-fund-report-release.html</guid>
			</item>
		
			<item>
				<title>iOS Secure State Preservation</title>
				<description>&lt;p&gt;iOS 6 introduced the concept of application state preservation. The purpose of
state preservation is to hide unexpected application termination from users.
Regardless of why the application was terminated (e.g., the user explicitly
kills the app or the system terminates it to free up memory for the foreground
application), state preservation allows users to return directly to the last
point of use within the app to provide as smooth a user experience as possible.
This is achieved by serializing the state of your app&amp;#39;s view controllers and
views when it is backgrounded and storing them to disk.&lt;/p&gt;

&lt;p&gt;For a detailed explanation of the preservation and restoration process, refer
to Apple&amp;#39;s State Preservation and Restoration &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/iphone/conceptual/iphoneosprogrammingguide/StatePreservation/StatePreservation.html&quot;&gt;Programming
Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;SecureNSCoder&lt;/h3&gt;

&lt;p&gt;Developers need to be careful when persisting view states, as there is the
potential to expose sensitive application information since the serialized data
is in plaintext. Therefore, any data that should remain private needs to be
appropriately protected from offline recovery. As such, iSEC created a &lt;a href=&quot;https://github.com/iSECPartners/SecureNSCoder&quot;&gt;sample
application&lt;/a&gt; that implements a more secure process for state
preservation and restoration by encrypting objects before encoding and writing
them to disk. The goal was to provide developers with a reference for securely
implementing state preservation so they can protect their application data while
still providing users with an uninterrupted experience.&lt;/p&gt;

&lt;p&gt;The NSCoder subclasses for key-based encoding, NSKeyedArchiver and
NSKeyedUnarchiver, define delegate protocols that allow applications to
customize the encoding and decoding processes, including manipulation of the
objects to be (de)serialized. By using a custom class that implements these
delegate protocols we can serialize objects, encrypt them with a key from the
Keychain, and then pass them back off to UIKit for preservation. When the app is
relaunched the data is decrypted and deserialized before being reinstantiated by
the view controller. Through implementing the delegate protocol, developers can
take fine grained control over which objects are encrypted or simply encrypt all
state information.&lt;/p&gt;

&lt;h3&gt;Project Page&lt;/h3&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://github.com/iSECPartners/SecureNSCoder&quot;&gt;the project page on GitHub&lt;/a&gt; and try out secure state
preservation in your apps!&lt;/p&gt;
</description>
				<pubDate>Wed, 18 Sep 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//ios,/crypto/2013/09/18/secure-state-preservation.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//ios,/crypto/2013/09/18/secure-state-preservation.html</guid>
			</item>
		
			<item>
				<title>Redirecting traffic with dnsRedir.py</title>
				<description>&lt;p&gt;Often while performing network protocol testing, we want to be able to redirect traffic going to a legitimate server to a server of our own. If the program in question is on the local machine and uses standard name resolution, it&amp;#39;s quite simple to edit the /etc/hosts file. However, this is not always the case. In these situations, it&amp;#39;s convenient to have a DNS server that provides an intentionally incorrect answer to DNS lookups. Setting up a DNS server can be a pain, and then there&amp;#39;s the matter of wanting to allow most queries to complete normally without interference.&lt;/p&gt;

&lt;p&gt;DnsRedir is a small tool built to address this need. It implements a small DNS server in Python that can answer a select few queries with intentionally false data while proxying all other queries through to a real DNS server. It is implemented to be small and easy to carry around. It should work fine in Windows, Linux and OS X, and its only depedency is that a recent version of Python 2.* be installed.&lt;/p&gt;

&lt;h3&gt;Getting the tool&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/iSECPartners/dnsRedir&quot;&gt;Github repository page&lt;/a&gt; for documentation and to download the tool.&lt;/p&gt;
</description>
				<pubDate>Thu, 05 Sep 2013 11:54:55 -0400</pubDate>
				<link>http://isecpartners.github.io//tools/2013/09/05/dnsRedir-release.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//tools/2013/09/05/dnsRedir-release.html</guid>
			</item>
		
			<item>
				<title>Man-in-the-Middling Non-Proxy Aware Wi-Fi Devices with a Pineapple</title>
				<description>&lt;p&gt;Every security professional has to Man-in-the-Middle (MitM) network
communication at some point in their career. This can be challenging in
situations where the device or application does not allow the user to specify
a proxy server. The only way to monitor this sort of communication is to
intercept the traffic flowing through the device&amp;#39;s Internet connection, most
commonly a wireless Access Point (AP). Getting this setup working correctly
can be difficult, as it depends on a number of factors, including having the
right hardware and properly configured software. There are various blog posts
which demonstrate how to create an AP and set up a DHCP server, but few go
into the nitty-gritty details of the entire process for middling network
communication.&lt;/p&gt;

&lt;p&gt;This blog article details the steps I took to create this setup in order to
perform MiTM analysis on a custom black-box device. For my setup, I used
Ubuntu and the &lt;a href=&quot;http://hakshop.myshopify.com/products/wifi-pineapple&quot;&gt;Wi-Fi
Pineapple&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;What is the Wi-Fi Pineapple?&lt;/h3&gt;

&lt;p&gt;You can think of the Pineapple as a highly configurable router. It sets up a
wireless AP and a DHCP server. My reasons for choosing the Pineapple were for
its compatible hardware and easy to use software configurations; both of which
are necessary for setting up a working AP. The Pineapple is built using the
&lt;a href=&quot;http://www.data-alliance.net/servlet/-strse-640/Alfa-Hornet-dsh-UB-Atheros-AR9331/Detail&quot;&gt;Atheros
AR9331&lt;/a&gt;
chipset supporting &lt;a href=&quot;https://help.ubuntu.com/community/WifiDocs/MasterMode&quot;&gt;Master
mode&lt;/a&gt; and uses
&lt;a href=&quot;https://openwrt.org/&quot;&gt;OpenWRT&lt;/a&gt; for setting up the 802.11 b/g/n wireless
router. Out of the box, the Pineapple has a number of tools which help in
wireless security testing and penetrations tests such as
&lt;a href=&quot;http://www.wirelessdefence.org/Contents/KARMAMain.htm&quot;&gt;Karma&lt;/a&gt;,
&lt;a href=&quot;http://linux.die.net/man/8/dnsspoof&quot;&gt;DNSSpoof&lt;/a&gt;, and
&lt;a href=&quot;http://linux.die.net/man/8/urlsnarf&quot;&gt;URLSnarf&lt;/a&gt; among others. All of these are
controlled via a web application which is accessible on the Pineapple. These
tools and features can also be accessed via SSH. The current version is Mark
IV and is sold for only $99.99, so the Pineapple is a cheap and easy to use
device for wireless assessments.&lt;/p&gt;

&lt;h3&gt;How to Man-in-the-Middle Communication using a Pineapple&lt;/h3&gt;

&lt;p&gt;Now that you know what the Pineapple is, we&amp;#39;ll look at how to use it to MiTM
network traffic.&lt;/p&gt;

&lt;p&gt;The diagram below represents my setup to MitM network traffic between a device
and a server on the Internet which can be understood as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The testing laptop is connected to the Internet via the Ethernet port.&lt;/li&gt;
&lt;li&gt;The testing laptop is also connected to the Pineapple via the Wi-Fi
adapter.&lt;/li&gt;
&lt;li&gt;The target device is configured to talk to the Pineapple.&lt;/li&gt;
&lt;li&gt;All monitoring and interception happens on the testing laptop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/anson/pineapple_set_up_617x206.jpg&quot; alt=&quot;Pineapple setup&quot;&gt;&lt;/p&gt;

&lt;p&gt;Note: You can modify this setup to suit your needs, e.g. connect the Pineapple
to the laptop via the Ethernet port and connect the laptop to the Internet via
Wi-Fi.&lt;/p&gt;

&lt;h3&gt;Step 1: Setting up the AP and DHCP service&lt;/h3&gt;

&lt;p&gt;Since the Pineapple sets up an AP and a DHCP server out of the box, our task
of setting up a working AP is handled by the Pineapple itself. The default AP
created by the Pineapple is called &lt;strong&gt;pineapple 19:3e&lt;/strong&gt;. It also has an IP
address of 172.16.42.1 and leases IP addresses in the range of 172.16.42.0/25.
The adjacent screenshot of an iPad (used for demonstration) connected to the
Pineapple depicts this information. You can change these settings by SSHing
into the Pineapple and by modifying its configurations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/anson/network_settings.jpg&quot; alt=&quot;Network Settings&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can now connect a device to the AP created by the Pineapple; however, the
device will not be able to connect to the Internet because we haven&amp;#39;t
connected the Pineapple to the Internet. To do that, we&amp;#39;ll need to set up
Internet Connection Sharing (ICS) on our laptop by forwarding all traffic from
the Pineapple&amp;#39;s Wi-Fi adapter to its Ethernet adapter (or vice versa depending
on your setup). Then, we&amp;#39;ll be able to monitor and intercept the traffic
flowing through the Pineapple.&lt;/p&gt;

&lt;h3&gt;Step 2: Configuring the Pineapple to connect to the Internet (Setting up ICS)&lt;/h3&gt;

&lt;p&gt;We can set up ICS with a bit of networking and
&lt;a href=&quot;http://en.wikipedia.org/wiki/Iptables&quot;&gt;IPTables&lt;/a&gt; magic. Enabling ICS
between the two physical interfaces (i.e. Ethernet and Wi-Fi adapter on the
tester&amp;#39;s laptop) involves the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enabling IP Forwarding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating a route between the interfaces for forwarding the network traffic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Routing network traffic between the interfaces through a proxy via IPTables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This task of setting up ICS is again made easy by the Pineapple. There is a
script called &lt;a href=&quot;http://wifipineapple.com/mk4/scripts/wp4.sh&quot;&gt;wp4.sh&lt;/a&gt; available
from the Pineapple website which sets up the ICS between the interfaces. A
full list of commands is available towards the end of the article which
includes the commands from the wp4.sh script in addition to a few others to
MiTM network traffic. For the wp4.sh script to execute successfully, you will
need some knowledge of the network configuration of your system. You can get
this information by running ifconfig on the laptop. Download the script from
the website and execute it inputting the necessary configuration so that it
executes successfully as seen in the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/anson/successful_execution_of_the_wp4.jpg&quot; alt=&quot;Executing wp4.sh&quot;&gt;&lt;/p&gt;

&lt;p&gt;Once you have ICS configured, the device connected to the Pineapple will be
able to access the Internet. As mentioned earlier, the Pineapple comes with a
plethora of tools which can be managed via a web interface. This web interface
also lists all the devices that are connected to it and also has a logging
functionality which can be really useful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/anson/devices.jpg&quot; alt=&quot;Device list&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can also monitor the traffic flowing through the Pineapple using packet
capture software such as &lt;a href=&quot;http://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt; by sniffing on
the Wi-Fi adapter of the laptop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/anson/monitoring.jpg&quot; alt=&quot;Monitoring with Wireshark&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now that you can monitor the network traffic flowing through the Pineapple,
let&amp;#39;s look at how to send this traffic to a proxy server so that we can
actively modify the data flowing across the wire.&lt;/p&gt;

&lt;h3&gt;Step 3: Routing network traffic through a proxy server via IPTables&lt;/h3&gt;

&lt;p&gt;If we were using a device such as an iPad for MitM communication this would
have been easy; just add a proxy server to the network settings of the device
and you would be in the middle of the network communication. However, since we
cannot modify or set the proxy settings on a non-proxy aware device our task
is a little more complicated. We can use IPTables rules to MitM the network
communication flowing from such a device through the Pineapple. The following
IPTables rules will redirect all traffic for ports 80 and 443 to port 8080.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080

iptables -t nat -I OUTPUT -p tcp -d 127.0.0.1 --dport 80 -j REDIRECT --to-ports 8080

iptables -t nat -I PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8080

iptables -t nat -I OUTPUT -p tcp -d 127.0.0.1 --dport 443 -j REDIRECT --to-ports 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now have a proxy server running on the loopback (127.0.0.1) interface
of the laptop and intercept traffic on port 8080. Using this setup we can make
changes to the network traffic on the fly as shown in the screenshot below
(where the iPad is used just for demonstration):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/anson/burp.jpg&quot; alt=&quot;Burp screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;Note:Intercepting SSL traffic from the embedded device could be a little
tricky and difficult based on the security configuration of the device. You
will have to install a SSL certificate (from the proxy server) into the
trusted root store of the device. This procedure will be device specific.&lt;/p&gt;

&lt;p&gt;The example above redirects HTTP.  If you&amp;#39;re not sure what the device is
talking, using the packet capture software to determine the ports, and
redirect the correct ones.  Make sure that the proxy server can handle the
protocol used by the device; &lt;a href=&quot;http://portswigger.net/burp/proxy.html&quot;&gt;Burp&lt;/a&gt; is
an HTTP proxy whereas
&lt;a href=&quot;http://www.contextis.com/research/tools/canape/&quot;&gt;Canape&lt;/a&gt;,
&lt;a href=&quot;http://intrepidusgroup.com/insight/mallory/&quot;&gt;Mallory&lt;/a&gt; and
&lt;a href=&quot;https://github.com/iSECPartners/tcpprox&quot;&gt;tcpprox&lt;/a&gt; can intercept raw TCP
communication.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s much easier to MitM the network communication of opaque devices than it
may seem.&lt;/p&gt;

&lt;p&gt;The complete list of commands to MitM network traffic using the Pineapple is
listed below. These commands have been taken from the wp4.sh script of the
Pineapple and include the additional IPTables rules for proxying the network
communication on ports 80 and 443 by redirecting it to port 8080. Replace the
variables with your setup&amp;#39;s configuration data.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;#Setup the Configurations

pineapplenetmask=255.255.255.0 # Default netmask for /24 network

pineapplenet=172.16.42.0/24 # Pineapple network. Default is 172.16.42.0/24

pineapplelan=XXX    # Interface of Ethernet cable connected to the laptop

pineapplewan=XXX    # Interface of the Pineapple connected to the laptop

pineapplegw=XXX     # The IP of the Internet Gateway

pineapplehostip=XXX #IP Address of host computer

pineappleip=172.16.42.1 # IP Address of the pineapple



#Bring up Ethernet Interface directly connected to Pineapple

ifconfig $pineapplelan $pineapplehostip netmask $pineapplenetmask up



#Enable IP Forwarding

echo &amp;#39;1&amp;#39; &amp;gt; /proc/sys/net/ipv4/ip_forward



#Clear the IPTables Chains and Rules

iptables -X

iptables -F



#Setup IP Forwarding

iptables -A FORWARD -i $pineapplewan -o $pineapplelan -s $pineapplenet -m state --state NEW -j ACCEPT

iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

iptables -A POSTROUTING -t nat -j MASQUERADE



#Remove the Default Route

route del default



#Add a new Default Gateway

route add default gw $pineapplegw $pineapplewan



#Modify the IPTables to enable proxying

iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080

iptables -t nat -I OUTPUT -p tcp -d 127.0.0.1 --dport 80 -j REDIRECT --to-ports 8080

iptables -t nat -I PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8080

iptables -t nat -I OUTPUT -p tcp -d 127.0.0.1 --dport 443 -j REDIRECT --to-ports 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Troy Hunt has a nice &lt;a href=&quot;http://www.troyhunt.com/2013/04/the-beginners-guide-to-breaking-website.html&quot;&gt;blog
article&lt;/a&gt;
on his site which shows you how to MitM network communication using the
Pineapple and Windows.&lt;/p&gt;

&lt;p&gt;Now that you know how to MitM network traffic, Happy Hacking!&lt;/p&gt;

&lt;p&gt;P.S.: If you want to learn more about testing back-box embedded devices come
watch our &lt;a href=&quot;http://www.blackhat.com/us-13/briefings.html#Chittenden&quot;&gt;Turbo
Talk&lt;/a&gt; at Black Hat
where Jonathan Chittenden and I will be talking about how we went about
testing &lt;a href=&quot;http://www.supermechanical.com/&quot;&gt;Twine&lt;/a&gt;. The presentation will give
insight into performing black-box analysis of an embedded system - for fun,
for research, or for profit. You will have a better understanding of where
things can go wrong, how to fix them and how to proceed from there. Further,
individuals charged with designing and building similar devices will
understand how to design such devices with better security. The presentation
will contain information that will be beneficial to designers, builders,
breakers, defenders and users alike.&lt;/p&gt;
</description>
				<pubDate>Wed, 21 Aug 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//tools/2013/08/21/mitm-wifi-pineapple.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//tools/2013/08/21/mitm-wifi-pineapple.html</guid>
			</item>
		
			<item>
				<title>Blackbox iOS App Analysis with Introspy</title>
				<description>&lt;p&gt;In 2013, assessing the security of iOS applications still involves a lot of manual, time-consuming tasks - especially when performing a black-box assessment. Without access to source code, a comprehensive review of these applications currently requires in-depth knowledge of various APIs and binary
formats, as well as the ability to use relatively complex, rather generic tools such as Cycript, Mobile Substrate, or a debugger.&lt;/p&gt;

&lt;h3&gt;Introspy&lt;/h3&gt;

&lt;p&gt;To simplify this process, we are releasing &lt;a href=&quot;http://isecpartners.github.io/Introspy-iOS/&quot;&gt;Introspy&lt;/a&gt; - an open-source application profiler for iOS. Introspy is designed to help penetration testers understand how an application functions at runtime by swizzling system APIs to gather detailed information on each of the calls that can then be analyzed offline.&lt;/p&gt;

&lt;p&gt;The tool comprises two separate components: the injected dylib that performs the swizzling and traces calls to the system APIs, and an offline analysis tool for mining the traced calls. The iOS tracer can be easily installed on a jailbroken iOS device and configured via the main Settings application. The tracer hooks security-sensitive APIs called by a given application and records the calls in a database. These include function calls related to cryptography, IPC, data storage / protection, networking, and user privacy. The full list of traced calls can be found on the &lt;a href=&quot;https://github.com/iSECPartners/Introspy-iOS/wiki&quot;&gt;project wiki&lt;/a&gt;. The introspy analyzer can then extract the database of traced calls off of the device and generate an HTML report displaying all recorded calls, plus a list of potential vulnerabilities affecting the application. Additionally, there are a myriad of options to allow quick and dirty analysis from the command-line.&lt;/p&gt;

&lt;h3&gt;Project page&lt;/h3&gt;

&lt;p&gt;We have been using this tool internally with much success for a period of time and have decided to share it with the community with the hope that it will lead to better black-box security analysis and ultimately more secure iOS applications. For a quick overview read our &lt;a href=&quot;http://isecpartners.github.io/Introspy-iOS/&quot;&gt;GitHub page&lt;/a&gt; or checkout the &lt;a href=&quot;https://github.com/iSECPartners/Introspy-iOS/&quot;&gt;GitHub repository&lt;/a&gt; for full details on how to install and configure the tool.&lt;/p&gt;
</description>
				<pubDate>Wed, 21 Aug 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//ios/tools/2013/08/21/introspy-release.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//ios/tools/2013/08/21/introspy-release.html</guid>
			</item>
		
			<item>
				<title>iOS SSL Kill Switch v0.5 Released</title>
				<description>&lt;p&gt;Version 0.5 of the &lt;a href=&quot;http://nabla-c0d3.github.io/blog/2012/08/12/ios-ssl-kill-switch-released/&quot;&gt;iOS SSL Kill Switch&lt;/a&gt; is now available.
iOS SSL Kill Switch is a tool to disable SSL certificate validation -
including certificate pinning - within iOS Apps in order to facilitate
blackbox testing. &lt;/p&gt;

&lt;p&gt;The main goal for this version was to add the ability to &lt;a href=&quot;https://github.com/iSECPartners/ios-ssl-kill-switch/issues/6&quot;&gt;disable
certification within the iTunes App Store app&lt;/a&gt;. While working on
this feature, I discovered a new way to disable certificate validation that
worked on many more applications than previous versions of the tweak.
As a consequence, version 0.5 of the SSL Kill Switch is a complete rewrite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The debian package is available &lt;a href=&quot;https://www.dropbox.com/s/p81z1l0ygnl35vw/com.isecpartners.nabla.sslkillswitch_v0.5-iOS_6.1.deb?dl=1&quot;&gt;here&lt;/a&gt;&lt;/strong&gt; and was tested on iOS 6.1.
Instructions on how to install it are available on the &lt;a href=&quot;https://github.com/iSECPartners/ios-ssl-kill-switch&quot;&gt;project page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;How it works&lt;/h3&gt;

&lt;p&gt;Just like the previous versions of the tool, the SSL Kill Switch uses &lt;a href=&quot;http://iphonedevwiki.net/index.php/MobileSubstrate&quot;&gt;MobileSubstrate&lt;/a&gt;
to patch system functions. However, this new version of the tweak hooks
functions within the &lt;a href=&quot;https://developer.apple.com/library/ios/DOCUMENTATION/Security/Reference/secureTransportRef/Reference/reference.html&quot;&gt;Secure Transport API &lt;/a&gt; instead of
hooking &lt;em&gt;NSURLConnection&lt;/em&gt; methods and &lt;em&gt;SecTrustEvaluate()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The Secure Transport API is &amp;quot;the lowest-level TLS implementation on iOS&amp;quot;
which makes it an interesting target because other higher level APIs such as
&lt;em&gt;NSURLConnection&lt;/em&gt; internally rely on the Secure Transport API for their
certificate validation routines. This means that disabling SSL certificate
validation in the Secure Transport API should affect most (if not all) of the
network APIs available within the iOS framework.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&quot;https://developer.apple.com/library/ios/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECSECURETRANSPORT&quot;&gt;documentation&lt;/a&gt;, disabling or performing 
custom certificate validation is implemented the following way when using the 
Secure Transport API:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Before starting the connection, call &lt;em&gt;SSLSetSessionOption()&lt;/em&gt; to set the &lt;em&gt;kSSLSessionOptionBreakOnServerAuth&lt;/em&gt; option to &amp;quot;true&amp;quot; on the SSL context. Setting this option to &amp;quot;true&amp;quot; disables the framework&amp;#39;s built-in certificate validation to let the application perform its own certificate verification.&lt;/li&gt;
&lt;li&gt;Run the Secure Transport handshake as per usual using the &lt;em&gt;SSLHandshake()&lt;/em&gt; function.&lt;/li&gt;
&lt;li&gt;When &lt;em&gt;SSLHandshake()&lt;/em&gt; returns &lt;em&gt;errSSLServerAuthCompleted&lt;/em&gt;, call &lt;em&gt;SSLCopyPeerTrust()&lt;/em&gt; to get a trust object for the connection and use that trust object to implement whatever custom server trust evaluation you desire.&lt;/li&gt;
&lt;li&gt;Either continue the Secure Transport handshake by calling &lt;em&gt;SSLHandshake()&lt;/em&gt; again, or shut down the connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The SSL Kill Switch removes the ability to do any kind of certificate
validation by hooking and modifying three functions within the &lt;a href=&quot;https://developer.apple.com/library/ios/DOCUMENTATION/Security/Reference/secureTransportRef/Reference/reference.html&quot;&gt;Secure
Transport API&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Patch &lt;em&gt;SSLCreateContext()&lt;/em&gt;: Disable the built-in certificate validation in all SSL contexts&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;SSLCreateContext()&lt;/em&gt; is used to create a new SSL context. SSL Kill Switch modifies this function 
so that all new SSL contexts have the &lt;em&gt;kSSLSessionOptionBreakOnServerAuth&lt;/em&gt; set to true 
by default:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;static SSLContextRef replaced_SSLCreateContext (
   CFAllocatorRef alloc,
   SSLProtocolSide protocolSide,
   SSLConnectionType connectionType
) {
    SSLContextRef sslContext = original_SSLCreateContext(alloc, protocolSide, connectionType);

    // Immediately set the kSSLSessionOptionBreakOnServerAuth option in order to disable cert validation
    original_SSLSetSessionOption(sslContext, kSSLSessionOptionBreakOnServerAuth, true);
    return sslContext;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Patch &lt;em&gt;SSLSetSessionOption()&lt;/em&gt;: Remove the ability to re-enable the built-in certificate validation&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;SSLSetSessionOption()&lt;/em&gt; can be called to set the value of specific options on a given SSL context. The tweak
patches this function in order to prevent the &lt;em&gt;kSSLSessionOptionBreakOnServerAuth&lt;/em&gt; from being set to any value.
The goal here is to ensure that all SSL contexts keep the default value of &amp;quot;true&amp;quot; for the 
&lt;em&gt;kSSLSessionOptionBreakOnServerAuth&lt;/em&gt; option (as set in the previous section):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;static OSStatus replaced_SSLSetSessionOption(
    SSLContextRef context, 
    SSLSessionOption option, 
    Boolean value
 ) {
    // Remove the ability to modify the value of the kSSLSessionOptionBreakOnServerAuth option
    if (option == kSSLSessionOptionBreakOnServerAuth)
        return noErr;
    else
        return original_SSLSetSessionOption(context, option, value);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Patch &lt;em&gt;SSLHandshake()&lt;/em&gt;: Force a trust-all custom certificate validation&lt;/h4&gt;

&lt;p&gt;Lastly, &lt;em&gt;SSLHandshake()&lt;/em&gt; is modified in order to prevent this function from ever returning
&lt;em&gt;errSSLServerAuthCompleted&lt;/em&gt;, which is the return value that will trigger the caller&amp;#39;s certificate
checking/pinning code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;static OSStatus replaced_SSLHandshake(
    SSLContextRef context
) {
    OSStatus result = original_SSLHandshake(context);

    // Hijack the flow when breaking on server authentication
    if (result == errSSLServerAuthCompleted) {
        // Do not check the cert and call SSLHandshake() again
        return original_SSLHandshake(context);
    }
    else
        return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s it ! After patching those three functions, certificate validation was disabled in all
the applications that I tried including Safari, Twitter, Square as well as the iTune App 
Store (&lt;a href=&quot;http://nabla-c0d3.github.io/blog/2013/08/20/intercepting-the-app-stores-traffic-on-ios/&quot;&gt;with a few additional steps&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;Project page&lt;/h3&gt;

&lt;p&gt;Have a look at the full code by browsing to the &lt;a href=&quot;https://github.com/iSECPartners/ios-ssl-kill-switch&quot;&gt;project page&lt;/a&gt; on GitHub.&lt;/p&gt;
</description>
				<pubDate>Tue, 20 Aug 2013 10:48:00 -0400</pubDate>
				<link>http://isecpartners.github.io//ios/tools/2013/08/20/ios-ssl-kill-switch-v0-dot-5-released.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//ios/tools/2013/08/20/ios-ssl-kill-switch-v0-dot-5-released.html</guid>
			</item>
		
			<item>
				<title>Black Hat 2013 - Femtocell Presentation Slides, Videos and App</title>
				<description>&lt;p&gt;We&amp;#39;re back from Las Vegas, rested, and finally ready to release the slides, videos, and our app from our presentation at Black Hat and Defcon: &lt;strong&gt;Traffic Interception and Remote Mobile Phone Cloning with a Compromised CDMA Femtocell&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Slides and videos&lt;/h3&gt;

&lt;p&gt;The slides are available &lt;a href=&quot;https://www.isecpartners.com/media/106086/femtocell.pdf&quot;&gt;here&lt;/a&gt;. The videos of our demos are up on Youtube:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=3FyNB4QmY1Q&quot;&gt;Phone Interception&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=R-4fkJiVeE4&quot;&gt;SMS Interception&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=uuwsMsvGAYo&quot;&gt;MMS Interception&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=2xjhtDobO8c&quot;&gt;Active Attack on Data Traffic&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=Ydo19YOzpzU&quot;&gt;Two-and-a-Half Way Phone Call&lt;/a&gt;, demonstrating Cloning&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;An Android app to detect femtocells&lt;/h3&gt;

&lt;p&gt;The CDMA Femtocells we examined differ from other types of personal wireless access points because the user does not have a choice in whether or not they connect to a femtocell.  Because your phone doesn&amp;#39;t give you a choice when it comes to selecting what tower to connect to, the only way we could find to avoid communicating through a femtocell was to turn off the phone&amp;#39;s cellular radio when it was connected to a femtocell.&lt;/p&gt;

&lt;p&gt;Our &lt;strong&gt;FemtoCatcher Android app&lt;/strong&gt; is now available &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.isecpartners.femtocatcher&quot;&gt;on the Google Play Store&lt;/a&gt;, with source code available on &lt;a href=&quot;https://github.com/iSECPartners/femtocatcher&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;FemtoCatcher runs on your Verizon Android smartphone and automatically switches your device into Airplane Mode, thus disabling all cellular connectivity, if it detects that your phone has connected to a femtocell.  While this does render your cellular connectivity unavailable in areas where the strongest signal is a femtocell, we would rather have no service than be connected to a tower that could be used by an attacker to intercept our communications. &lt;/p&gt;

&lt;p&gt;Some important notes on how FemtoCatcher works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FemtoCatcher uses the network ID information available through Android API calls to determine if the phone is connected to a Femtocell.&lt;/li&gt;
&lt;li&gt;We did not test how easy it would be for an attacker to change this information to fool the app, but certainly don&amp;#39;t rule out the possibility.&lt;/li&gt;
&lt;li&gt;Some Verizon Android phones display an icon in the status bar and/or display an ERI banner of &amp;quot;Network Extender&amp;quot; when connected to a femtocell.  The strategy used by FemtoCatcher to detect the presence of a femtocell is based on the same techniques used by these indicators in Verizon ROMs.&lt;/li&gt;
&lt;li&gt;FemtoCatcher will not automatically take your phone out of airplane mode when you move away from a femtocell.  You will be without service until you manually re-enable your connectivity.  If FemtoCatcher is running and you are in range of a femtocell when you disable airplane mode, FemtoCatcher will quickly put your phone back in airplane mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of its imperfect and potentially confusing nature, we are not marketing FemtoCatcher to the general public, but rather to security minded people and those that are interested in femtocells.  We built this tool for our own testing, but we encourage you to poke at the source code and use it as you see fit.&lt;/p&gt;
</description>
				<pubDate>Mon, 19 Aug 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//femtocell/blackhat/2013/08/19/femtocell-slides.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//femtocell/blackhat/2013/08/19/femtocell-slides.html</guid>
			</item>
		
			<item>
				<title>SSLyze v0.7 Released</title>
				<description>&lt;p&gt;A new version of &lt;a href=&quot;https://github.com/iSECPartners/sslyze&quot;&gt;SSLyze&lt;/a&gt; is now available. SSLyze is a Python tool that can analyze the SSL configuration of a server by connecting to it.&lt;/p&gt;

&lt;h3&gt;Changelog&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Complete rewrite of the OpenSSL wrapper as a &lt;a href=&quot;https://github.com/nabla-c0d3/nassl&quot;&gt;C extension&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;SSLyze is now statically linked with the latest version of OpenSSL instead of using the system&amp;#39;s (potentially outdated/broken) OpenSSL library&lt;/li&gt;
&lt;li&gt;All of SSLyze&amp;#39;s features are now available on all supported platforms (including SSL 2.0, TLS 1.1 and TLS 1.2)&lt;/li&gt;
&lt;li&gt;Scans are slightly faster&lt;/li&gt;
&lt;li&gt;Python 2.6 is no longer supported&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Support for StartTLS FTP, POP, IMAP, LDAP and &amp;quot;auto&amp;quot;. See --starttls&lt;/li&gt;
&lt;li&gt;Support for OCSP Stapling. See --certinfo&lt;/li&gt;
&lt;li&gt;Other various improvements that results in SSLyze being more stable/robust&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Packages&lt;/h3&gt;

&lt;p&gt;SSLyze requires Python 2.7; the supported platforms are Windows 7 32/64 bits, 
Linux 32/64 bits and OS X 64 bits.
SSLyze is statically linked with OpenSSL 1.0.1e. For this reason, the easiest 
way to run SSLyze is to download one the following pre-compiled packages:&lt;/p&gt;

&lt;h4&gt;Linux&lt;/h4&gt;

&lt;p&gt;The following packages were tested on Debian 7 and Ubuntu 13.04.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/u6h4u50daejuz5q/sslyze-0_7-linux32.zip?dl=1&quot;&gt;Package for Python 32 bits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/zf0e8oolkpkcuhu/sslyze-0_7-linux64.zip?dl=1&quot;&gt;Package for Python 64 bits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;OS X Mountain Lion&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/v4vb2q7h5cb3tl3/sslyze-0_7-osx64.zip?dl=1&quot;&gt;Package for Python 64 bits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Windows 7&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/wmmgny3cz3tsido/sslyze-0_7-win32.zip?dl=1&quot;&gt;Package for Python 32 bits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/xt526dgsyz1utid/sslyze-0_7-win64.zip?dl=1&quot;&gt;Package for Python 64 bits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 14 Aug 2013 11:34:00 -0400</pubDate>
				<link>http://isecpartners.github.io//ssl/tools/2013/08/14/sslyze-v0-dot-7-released.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//ssl/tools/2013/08/14/sslyze-v0-dot-7-released.html</guid>
			</item>
		
			<item>
				<title>Black Hat 2013 - Cryptopocalypse Presentation Available</title>
				<description>&lt;p&gt;The slides for the &lt;strong&gt;Preparing for the Cryptopocalypse&lt;/strong&gt; presentation from Black Hat 2013 are now available.&lt;/p&gt;

&lt;p&gt;The group presentation was given by Alex Stamos, Tom Ritter, Javed Samuel and Thomas Ptacek and looks into the latest breakthroughs in the academic crypto community.&lt;/p&gt;

&lt;p&gt;The paper can be downloaded &lt;a href=&quot;https://github.com/iSECPartners/publications/blob/master/presentations/ritter_samuel_stamos_bh_2013_cryptopocalypse.pdf?raw=true&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Tue, 06 Aug 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//blackhat/crypto/2013/08/06/cryptopocalypse.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//blackhat/crypto/2013/08/06/cryptopocalypse.html</guid>
			</item>
		
			<item>
				<title>Black Hat 2013 - Bluetooth Smart Presentation Available</title>
				<description>&lt;p&gt;The slides for the &lt;strong&gt;Bluetooth Smart&lt;/strong&gt; presentation from Black Hat 2013 are now available.&lt;/p&gt;

&lt;p&gt;The presentation was given by Mike Ryan and looks into Bluetooth &amp;quot;Smart&amp;quot; (also known as Bluetooth Low Energy or BTLE), the latest Bluetooth spec, 4.0, used by fitness devices, locks, and recent smartphones.&lt;/p&gt;

&lt;p&gt;The paper can be downloaded &lt;a href=&quot;https://github.com/iSECPartners/publications/blob/master/presentations/bluetooth_smart_good_bad_ugly_fix-mikeryan-blackhat_2013.pdf?raw=true&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Tue, 06 Aug 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//blackhat/2013/08/06/bluetooth-smart.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//blackhat/2013/08/06/bluetooth-smart.html</guid>
			</item>
		
			<item>
				<title>Tool Release: PeachFarmer</title>
				<description>&lt;h3&gt;Cloud-based Fuzzing with Peach&lt;/h3&gt;

&lt;p&gt;Several of the consultants here at iSEC perform fuzz testing using the &lt;a href=&quot;http://www.peachfuzzer.com/&quot;&gt;Peach fuzzing framework&lt;/a&gt;. One of Peach&amp;#39;s strengths is that it allows the user to parallelize a fuzzing job between multiple machines, making Peach a great way to perform cloud-based fuzzing. The drawback of using Peach in the cloud is that each Peach instance generates a large number of log files and crash dumps. For the user to analyze their results effectively, they must aggregate all of these logs manually. With a large number of fuzzing instances, this can become a cumbersome task.&lt;/p&gt;

&lt;h3&gt;PeachFarmer&lt;/h3&gt;

&lt;p&gt;To solve this problem, we created PeachFarmer. PeachFarmer runs as an agent on each Peach cloud instance. The user can query the fuzzing progress via the PeachFarmer client, which collects all of Peach&amp;#39;s logs and crash dumps from each instance in the cloud. The client then downloads and aggregates these files to a central location on the user&amp;#39;s local machine. PeachFarmer only downloads the data that has changed since the last successful check, so there&amp;#39;s no redundant transfer of data files. In our own usage, PeachFarmer has made management of cloud fuzzing instances much faster and easier.&lt;/p&gt;

&lt;h3&gt;Project Page&lt;/h3&gt;

&lt;p&gt;Today we are excited to release PeachFarmer to the security community. Check out the &lt;a href=&quot;https://github.com/iSECPartners/PeachFarmer&quot;&gt;project page on Github&lt;/a&gt;, try it out for yourself, and tell us what you think.&lt;/p&gt;

&lt;p&gt;Happy fuzzing!&lt;/p&gt;
</description>
				<pubDate>Fri, 14 Jun 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//tools/2013/06/14/peachfarmer-release.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//tools/2013/06/14/peachfarmer-release.html</guid>
			</item>
		
			<item>
				<title>An Introduction to Authenticated Encryption</title>
				<description>&lt;p&gt;Historically, independent encryption and message authentication codes (MAC) have been used to provide message confidentiality and integrity. This has led to confusion within the user community, as there was no standard construct for combining these. The result of this has been often insecure combinations that have resulted in a number of high profile system breaks such as the use of WEP in 802.11. Over the last ten years, the cryptographic community has moved to a more formal approach to the development and specification of cryptographic algorithms and modes of operation; this has resulted in provably secure Authenticated Encryption primitives that provide both confidentiality and integrity.&lt;/p&gt;

&lt;p&gt;Authenticated Encryption is beginning to see deeper adoption in both security standards and implementations, yet is still not commonly understood by the security community.  In this paper, iSEC&amp;#39;s Shawn Fitzgerald attempts to bridge the gap between academic and technical standards and non-technical overviews by presenting a systematic introduction to Authenticated Encryption and the most commonly used modes such as CCM, EAX, OCB and GCM.&lt;/p&gt;

&lt;p&gt;The paper can be downloaded &lt;a href=&quot;https://github.com/iSECPartners/publications/raw/master/whitepapers/introduction_to_authenticated_encryption.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Mon, 29 Apr 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//crypto/2013/04/29/authenticated-encryption.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//crypto/2013/04/29/authenticated-encryption.html</guid>
			</item>
		
			<item>
				<title>Tool Release: YoNTMA</title>
				<description>&lt;p&gt;You&amp;#39;re a responsible defender of your data. You keep all of your disks encrypted. You hibernate your laptop when you&amp;#39;re not using it to keep any sensitive data out of RAM. You&amp;#39;re known by friends, family, and colleagues as a tireless crusader against data theft. But do you hibernate your laptop when you visit a co-worker&amp;#39;s office for a few minutes? What about when you get up to use the bathroom? What happens if a thief snatches your laptop while it&amp;#39;s locked, but still powered on? The encryption keys are still in memory, which makes them vulnerable to DMA or cold boot attacks. Once the thief has the data encryption keys, they effectively have physical access to an unencrypted laptop, which means game over for your data. &lt;/p&gt;

&lt;h3&gt;You&amp;#39;ll Never Take Me Alive!&lt;/h3&gt;

&lt;p&gt;Enter &lt;em&gt;YoNTMA&lt;/em&gt;! &lt;em&gt;YoNTMA&lt;/em&gt; (You&amp;#39;ll Never Take Me Alive!) is a tool designed to enhance the protection of encrypted data. &lt;em&gt;YoNTMA&lt;/em&gt; runs as a background service and begins monitoring your computer any time the screen is locked. If the power cable or Ethernet cable is disconnected from the system while your laptop is locked, &lt;em&gt;YoNTMA&lt;/em&gt; will immediately hibernate the machine to ensure that the disk encryption keys do not remain in RAM. This ensures that if a thief walks off with your powered-on laptop, your encrypted data stays protected.&lt;/p&gt;

&lt;h3&gt;Project Page&lt;/h3&gt;

&lt;p&gt;iSEC Partners is pleased to announce the first public release of &lt;em&gt;YoNTMA&lt;/em&gt;. The project is hosted on &lt;a href=&quot;https://github.com/iSECPartners/yontma&quot;&gt;GitHub&lt;/a&gt;.
Try it out and let us know what features you&amp;#39;d like to see or any other feedback you have on the &lt;a href=&quot;https://github.com/iSECPartners/yontma/issues&quot;&gt;Issues&lt;/a&gt; page.&lt;/p&gt;
</description>
				<pubDate>Mon, 18 Mar 2013 07:35:05 -0400</pubDate>
				<link>http://isecpartners.github.io//tools/2013/03/18/yontma-release.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//tools/2013/03/18/yontma-release.html</guid>
			</item>
		
			<item>
				<title>Tool Release: tcpprox</title>
				<description>&lt;p&gt;&lt;em&gt;Tcpprox&lt;/em&gt; is a simple command line tcp proxy written in Python. It is designed to have very minimal requirements - it runs directly from Python (tested in Python 2.7) from a single source file (unless the auto-certificate option is used).&lt;/p&gt;

&lt;p&gt;When running, the proxy accepts incoming TCP connections and copies data to a TCP connection to another machine. Options allow for SSL and IPv6 connections and for the logging of all data. Data is logged in a format that preserves connection, timing and direction information and a small utility is provided to dump out the information in various formats. A small utility is also provided for generating CA and SSL certificates. This utility is the only component that relies on an external python library, but it can be run on a different machine if necessary.&lt;/p&gt;

&lt;p&gt;In comparison with other TCP proxy tools, &lt;em&gt;tcpprox&lt;/em&gt; is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simpler.&lt;/li&gt;
&lt;li&gt;built to support both IPv6 and IPv4.&lt;/li&gt;
&lt;li&gt;able to auto-generate SSL certificates.&lt;/li&gt;
&lt;li&gt;capable of extensive logging in different formats.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Project Page&lt;/h3&gt;

&lt;p&gt;Check it out on &lt;em&gt;tcpprox&lt;/em&gt;&amp;#39;s &lt;a href=&quot;https://github.com/iSECPartners/tcpprox&quot;&gt;Github page&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Thu, 21 Feb 2013 06:35:05 -0500</pubDate>
				<link>http://isecpartners.github.io//tools/2013/02/21/tcpprox-release.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//tools/2013/02/21/tcpprox-release.html</guid>
			</item>
		
			<item>
				<title>Exploring SSL Pinning on iOS</title>
				<description>&lt;p&gt;When an iOS app only needs to communicate to a well-defined set of servers over SSL, the security of the app&amp;#39;s network communications can be improved through SSL pinning. By requiring a specific certificate to be part of the server&amp;#39;s certificate chain, the threat of a rogue CA or a CA compromise is significantly reduced.&lt;/p&gt;

&lt;p&gt;To simplify the process of adding this security feature to iOS apps, I released some source code as part of iSEC Partners&amp;#39; &lt;a href=&quot;https://github.com/iSECPartners/ssl-conservatory/tree/master/ios&quot;&gt;SSL conservatory project&lt;/a&gt;. The two source files can easily be added to an existing iOS app and provide a simple API to pin certificates to the domains the app needs to connect to.&lt;/p&gt;

&lt;h4&gt;The &lt;em&gt;SSLCertificatePinning&lt;/em&gt; class&lt;/h4&gt;

&lt;p&gt;This implementation allows a developer to pin a certificate for any number of domains the application needs to connect to. Specifically, developers can whitelist a certificate that will have to be part of the certificate chain sent back by the server during the SSL handshake. This gives additional flexibility as developers can decide to pin the CA/anchor certificate, the server/leaf certificate, or any intermediate certificate for a given domain. Each option has different advantages and limitations; for example, pinning the server/leaf certificate provides the best security but the certificate is going to change more often than the CA/anchor certificate. A change in the certificate (for example because it expired) will result in the app being unable to connect to the server. When that happens, the new certificate can be pushed to users by releasing a new version of the iOS app.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;SSLCertificatePinning&lt;/em&gt; API only exposes two methods and a convenience class:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;+(BOOL)loadSSLPinsFromDERCertificates:(NSDictionary *)certificates&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method takes a dictionary with domain names as keys and DER-encoded certificates as values and stores them in a pre-defined location on the filesystem.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;+(BOOL)verifyPinnedCertificateForTrust:(SecTrustRef)trust andDomain:(NSString *)domain&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This method accesses the certificates previously loaded using the &lt;em&gt;loadSSLPinsFromDERCertificates:&lt;/em&gt; method and looks in the trust object&amp;#39;s certificate chain for a certificate pinned to the given domain.
&lt;em&gt;SecTrustEvaluate()&lt;/em&gt; should always be called before this method to ensure that the certificate chain is valid.&lt;/p&gt;

&lt;h4&gt;The &lt;em&gt;SSLPinnedNSURLConnectionDelegate&lt;/em&gt; class&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;SSLPinnedNSURLConnectionDelegate&lt;/em&gt; class is designed to be subclassed and extended to implement the &lt;em&gt;NSURLConnectionDelegate&lt;/em&gt; protocol and be used as a delegate for &lt;em&gt;NSURLConnection&lt;/em&gt; objects. This class implements the &lt;em&gt;connection:willSendRequestForAuthenticationChallenge:&lt;/em&gt; method so that it automatically validates that the certificate pinned to the domain the NSURLConnection object is accessing is part of the server&amp;#39;s certificate chain.&lt;/p&gt;

&lt;h3&gt;Cocoa Touch Shortcomings&lt;/h3&gt;

&lt;p&gt;Specific limitations due to what functions the iOS API exposes to developers and how much freedom they have when dealing with certificate validation prevented me from implementing some of the ideas that I had in mind when I started this project.&lt;/p&gt;

&lt;h4&gt;Public key pinning&lt;/h4&gt;

&lt;p&gt;For various reasons, it is actually better to pin a public key to a domain rather than the whole certificate. Unfortunately, public key pinning can only be partially implemented on iOS. While it is possible to extract the public key from a given certificate using a convoluted series of APIs calls (&lt;em&gt;SecTrustCreateWithCertificates()&lt;/em&gt; and &lt;em&gt;SecTrustCopyPublicKey()&lt;/em&gt;), the anchor certificate for a given certificate chain cannot be accessed. Therefore, as the anchor/CA public key cannot be extracted and validated, only the public key of the leaf or any intermediate certificates can be pinned to a domain.&lt;/p&gt;

&lt;h4&gt;SSL pinning in webviews&lt;/h4&gt;

&lt;p&gt;On iOS, the &lt;em&gt;UIWebView&lt;/em&gt; class can be used to directly embed and display web content inside an app. However, as opposed to regular network communication APIs such as &lt;em&gt;NSURLConnection&lt;/em&gt;, authentication challenges cannot be reliably handled when using the &lt;em&gt;UIWebView&lt;/em&gt; class. Various tricks exist, for example to perform HTTP Basic authentication or to disable certificate validation within a webview through a credential caching mechanism. However, the lack of explicit APIs to configure the webview&amp;#39;s behavior makes it unsuitable for SSL pinning.&lt;/p&gt;

&lt;h4&gt;Revocation&lt;/h4&gt;

&lt;p&gt;Revocation checking is needed even when doing certificate pinning. However, there is no way on iOS to configure how revocation should be handled. The default behavior is to only check revocation for EV certificates, and this validation is &amp;quot;best attempt&amp;quot;, meaning that if the OCSP server cannot be reached, the validation will still not fail.&lt;/p&gt;

&lt;h3&gt;Project Page&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/iSECPartners/ssl-conservatory/tree/master/ios&quot;&gt;SSL Conservatory&lt;/a&gt; on GitHub.&lt;/p&gt;
</description>
				<pubDate>Tue, 19 Feb 2013 08:11:22 -0500</pubDate>
				<link>http://isecpartners.github.io//ios/ssl/2013/02/19/ios-pinning.html</link>
				<guid isPermaLink="true">http://isecpartners.github.io//ios/ssl/2013/02/19/ios-pinning.html</guid>
			</item>
		
	</channel>
</rss>
